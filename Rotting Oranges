# We will use BFS. But the twist is that we will do multiple source BFS ie 
# the q will not have just one cell initially but all the cells which are rotten 

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        q = []
        empty = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 0:
                    empty += 1
                if grid[i][j] == 2:
                    q.append([i, j])     
        if empty == len(grid)*len(grid[0]):
            return 0
        
        if not q:
            return -1
        
        minute = 0
        visited = set()
        while q:
            l = len(q)
            minute += 1
            for i in range(l):
                r, c = q.pop(0)
                if r-1 >= 0 and grid[r-1][c] == 1 and (r-1,c) not in visited:
                    grid[r-1][c] = 2
                    q.append((r-1, c))
                    visited.add((r-1,c))
                if r+1 < len(grid) and grid[r+1][c] == 1 and (r+1,c) not in visited:
                    grid[r+1][c] = 2
                    q.append((r+1, c))
                    visited.add((r+1,c))
                if c-1 >= 0 and grid[r][c-1] == 1 and (r,c-1) not in visited:
                    grid[r][c-1] = 2
                    q.append((r, c-1))
                    visited.add((r,c-1))
                if c+1 < len(grid[0]) and grid[r][c+1] == 1 and (r,c+1) not in visited:
                    grid[r][c+1] = 2
                    q.append((r, c+1))
                    visited.add((r,c+1))
            
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    return -1
        return minute-1
                            
