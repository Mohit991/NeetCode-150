# Explanation: Create 3 lists each consisting of 9 sets each. rowSet, colSet and boxSet.
# Each list will tell if the current element has appeard before in the current row, or col or box.
# If element you find at ith row is already in rowSet[i] that means it has already appeard in 
# this row, so return false, else add it to rowSet of current list. 
# Do same for column and box. 
class Solution:
    def getBoxNumber(self, i, j):
        if i <= 2 and j <= 2:
            return 0
        if i <= 2 and j >= 3 and j <= 5:
            return 1     
        if i <= 2 and j >= 6 and j <= 8:
            return 2
        
        if i >= 2 and i <= 5 and j <= 2:
            return 3
        if  i >= 2 and i <= 5 and j >= 3 and j <= 5:
            return 4   
        if  i >= 2 and i <= 5 and j >= 6 and j <= 8:
            return 5
        
        if i >= 6 and i <= 8 and j <= 2:
            return 6
        if i >= 6 and i <= 8 and j >= 3 and j <= 5:
            return 7  
        if i >= 6 and i <= 8 and j >= 6 and j <= 8:
            return 8
        
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        rowSet = [set() for i in range(9)]
        colSet = [set() for i in range(9)]
        boxSet = [set() for i in range(9)]
        
        for i in range(9):
            for j in range(9):
                if board[i][j] == '.':
                    continue
        
                if board[i][j] in rowSet[i]:
                    return False
                else:
                    rowSet[i].add(board[i][j])
                
                if board[i][j] in colSet[j]:
                    return False
                else:
                    colSet[j].add(board[i][j])
                
                box = self.getBoxNumber(i, j)
                if board[i][j] in boxSet[box]:
                    return False
                else:
                    boxSet[box].add(board[i][j])
        return True
    
##############################################################

# Another solution is to just add current elemnet with current row and a 'is in row' string.

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        alreadySeen = set()
        for i in range(9):
            for j in range(9):
                num = board[i][j]
                if num == '.':
                    continue
                currentRow = num + 'is in row' + str(i)
                currentCol = num + 'is in col' + str(j)
                currentBox = num + 'is in bow' + str(int(i/3)) + str(int(j/3))
                if currentRow in alreadySeen or currentCol in alreadySeen or currentBox in alreadySeen:
                    return False
                else:
                    alreadySeen.add(currentRow)
                    alreadySeen.add(currentCol)
                    alreadySeen.add(currentBox)
        return True
