# Explanation: https://leetcode.com/problems/task-scheduler/discuss/104504/C%2B%2B-8lines-O(n)

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        FreqCount = {}
        for task in tasks:
            if task in FreqCount:
                FreqCount[task] += 1
            else:
                FreqCount[task] = 1
        maxFreq = max(FreqCount.values())
        ans = (maxFreq - 1)*(n + 1)
        for task, freq in FreqCount.items():
            if freq == maxFreq:
                ans += 1
        return max(ans, len(tasks))


# Explanation: https://leetcode.com/problems/task-scheduler/discuss/104500/Java-O(n)-time-O(1)-space-1-pass-no-sorting-solution-with-detailed-explanation

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        FreqCount = {}
        for task in tasks:
            if task in FreqCount:
                FreqCount[task] += 1
            else:
                FreqCount[task] = 1
        maxFreq = max(FreqCount.values())
        maxFreqTasks = 0
        for task in FreqCount:
            if FreqCount[task] == maxFreq:
                maxFreqTasks += 1
            
        partCount = maxFreq - 1
        partLength = n - (maxFreqTasks - 1)
        emptySlots = partCount * partLength
        availableTasks = len(tasks) - (maxFreq * maxFreqTasks)
        idles = max(0, emptySlots - availableTasks)
        
        return len(tasks) + idles
