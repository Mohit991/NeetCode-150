class Solution:
    def longestPalindrome(self, s: str) -> str:
        maxLen = 0
        maxLeft, maxRight = 0, 0
        
        #Case I: For odd length palindrome. We will grow from a single character. 
        for i in range(0, len(s)):
            left, right = i, i
            while left >= 0 and right < len(s) and s[left] == s[right]:
                if right - left + 1 > maxLen:
                    maxLen = right - left + 1
                    maxLeft, maxRight = left, right
                left -= 1
                right += 1
        
        #Case II: For even length palindrome. We will grow from a two characters. 
        #Current and the next character. 
        for i in range(0, len(s)-1):
            left, right = i, i+1
            while left >= 0 and right < len(s) and s[left] == s[right]:
                if right - left + 1 > maxLen:
                    maxLen = right - left + 1
                    maxLeft, maxRight = left, right
                left -= 1
                right += 1
        
        return s[maxLeft:maxRight+1]
                
        
class Solution:
    def findPalindrome(self, s, left, right):
        maxLen = 0
        maxLeft, maxRight = 0, 0
        while left >= 0 and right < len(s) and s[left] == s[right]:
            if right - left + 1 > maxLen:
                maxLen = right - left + 1
                maxLeft, maxRight = left, right
            left -= 1
            right += 1
        return maxLen, maxLeft, maxRight
    
    def longestPalindrome(self, s: str) -> str:
        maxLen = 0
        maxLeft, maxRight = 0, 0
        for i in range(0, len(s)):
            #Case I: For odd length palindrome. We will grow from a single character.
            currentMaxLen, currentMaxLeft, currentMaxRight = self.findPalindrome(s, i, i)
            if currentMaxLen > maxLen:
                maxLen = currentMaxLen
                maxLeft = currentMaxLeft
                maxRight = currentMaxRight
            
            #Case II: For even length palindrome. We will grow from a two characters. 
            #Current and the next character.
            currentMaxLen, currentMaxLeft, currentMaxRight = self.findPalindrome(s, i, i+1)
            if currentMaxLen > maxLen:
                maxLen = currentMaxLen
                maxLeft = currentMaxLeft
                maxRight = currentMaxRight
                
        return s[maxLeft:maxRight+1]                

###########################################################################


# #Brute Force Solution
# #TLE
# You can use brute force approch and using that you can generate all the possible substrings from s. 
# Now for each substring, you can check if it is a palindrome or not. 
# TC - O(n^3), SC - O(1)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        maxCount = 0
        maxPalid = ''
        for i in range(n):
            for j in range(i, n):
                count = 0
                t1 = i
                t2 = j
                while t1 <= t2:
                    if s[t1] != s[t2]:
                        break
                    
                    if t1 == t2: count += 1
                    else: count += 2
                    t1 += 1
                    t2 -= 1
                
                if count > maxCount and t1 > t2:
                    maxCount = count
                    maxPalin = s[i:j+1]
                    
        return maxPalin

##################################################################

# #Brute Force Solution
# #TLE
# You can use brute force approch and using that you can generate all the possible substrings from s. 
# Now for each substring, you can check if it is a palindrome or not. 
# TC - O(n^3), SC - O(1)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        def findPalindrome(s, left, right):
            l,r = left, right
            while left <= right and s[left] == s[right]:
                left += 1
                right -= 1
                
            return r - l + 1 if left > right else 0
        
        n = len(s)
        maxCount = 0
        maxPalin = ''
        for i in range(n):
            for j in range(i, n):
                count = findPalindrome(s, i, j)  
                if count > maxCount:
                    maxCount = count
                    maxPalin = s[i:j+1]
                    
        return maxPalin  
    
# ##################################################################

# To optimize, you can start a loop from 0 to n. Take every element and consider it as the central element
# in an odd length palindrome. Now use two vars, left, right and left will move to left of i 
# and right to the right of i. left should not go less than zero and right should not go beyond length.
# Also, left and right chars must match. Once this inner loop ends you can check if right - left is larger
# than previously calculated res. If yes, update res. This will get us the largest odd length palindrome. 
# For even length palindrome, if ith char and i+1th char are same then there could be an even length palindrome. 
# Just do the same thing but this time left and right dont start from i but left = i and right = i+1.
# TC - O(n^2), SC - O(1)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        def findPalindrome(s, left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
                
            return s[left+1:right]
        
        res = ''
        for i in range(len(s)):
            temp = findPalindrome(s,i,i)
            if len(temp) > len(res):
                res = temp
                
            temp = findPalindrome(s,i,i+1)
            if len(temp) > len(res):
                res = temp
                
        
        
        return res

##################################################################

# To optimize, you can start a loop from 0 to n. Take every element and consider it as the central element
# in an odd length palindrome. Now use two vars, left, right and left will move to left of i 
# and right to the right of i. left should not go less than zero and right should not go beyond length.
# Also, left and right chars must match. Once this inner loop ends you can check if right - left is larger
# than previously calculated res. If yes, update res. This will get us the largest odd length palindrome. 
# For even length palindrome, if ith char and i+1th char are same then there could be an even length palindrome. 
# Just do the same thing but this time left and right dont start from i but left = i and right = i+1.
# TC - O(n^2), SC - O(1)

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s) == 1: return s
        res = ''
        for i in range(len(s)-1):
            left, right = i, i
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
                         
            if right - left > len(res):
                res = s[left+1:right]
            
            if s[i] == s[i+1]:
                left, right = i, i+1
                while left >= 0 and right < len(s) and s[left] == s[right]:
                    left -= 1
                    right += 1
            
            if right - left > len(res):
                res = s[left+1:right]

        return res                
        
        
#################################################################

# Start a loop i from 0 to n. From right = i start a loop till either right >= len or s[i] != s[right].
# Save this right as jump. From this you will get substrings of same chars eg "aa" or "aaa" etc. 
# Once done take left = i-1 and right will be at correct location. 
# Now apply loop while left >= 0 and right < len and left char and right char are same, 
# left-- and right--.  Now if right - left is greater than the last result then update the result.
# At the end dont update i as i++ but do i = i + jump. This will reduce complexity. 

class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ''
        i = 0
        while i < len(s):
            right  = i
            while right < len(s) and s[right] == s[i]:
                right += 1
            jump = right    
            left = i - 1
            
            while left >= 0 and right < len(s) and s[right] == s[left]:
                left -= 1
                right += 1
                
            if right - left > len(res):
                res = s[left+1:right]
                
            i = jump     
        return res         
