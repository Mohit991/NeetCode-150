class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [0] + [inf] * amount
        
        for amount in range(1, len(dp)):
            for coin in coins:
                if amount - coin < 0:
                    continue
                dp[amount] = min(dp[amount], 1 + dp[amount - coin])
        
        return dp[-1] if dp[-1] != inf else -1
    
#################################################################################
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [[inf for i in range(amount + 1)] for i in range(len(coins) + 1)]
        dp[0][0] = 0 
        # print(dp)
        
        for i in range(1, len(dp)):
            coin = coins[i - 1]
            for j in range(len(dp[0])): 
                amount = j
                if coin > amount:
                    dp[i][j] = dp[i-1][j]
                else: 
                    dp[i][j] = min(dp[i-1][j], 1 + dp[i][amount - coin])
                
        return dp[-1][-1] if dp[-1][-1] != inf else -1

#################################################################################

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        def findChange(index, amount, memo):
            if (index, amount) in memo:
                return memo[index, amount]
            
            if amount == 0:
                return 0
            
            if amount < 0 or index == len(coins):
                return math.inf
            
            takeCoin = findChange(index, amount - coins[index], memo) + 1
            dontTakeCoin = findChange(index + 1, amount, memo) + 0
            
            memo[index, amount] = min(takeCoin, dontTakeCoin)
            return memo[index, amount] 
        
        
        res = findChange(0, amount, {})
        return res if res != math.inf else -1
           
            
        
            
        
