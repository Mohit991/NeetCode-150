# Memoization
class Solution:
    def numDecodings(self, s: str) -> int:
        def dfs(i):
            if i >= len(s):
                return 1
            res = 0
            if s[i] != "0":
                res = dfs(i + 1)
                if i + 1 < len(s) and (s[i] == "1" or s[i] == "2" and s[i + 1] in "0123456"):
                    res += dfs(i + 2)
            return res
        return dfs(0)

class Solution:
    def numDecodings(self, s: str) -> int:
        def dfs(i, memo):
            if i in memo:
                return memo[i]
            
            if i >= len(s):
                return 1

            res = 0
            if s[i] != "0":
                res = dfs(i + 1, memo)
                if i + 1 < len(s) and (s[i] == "1" or s[i] == "2" and s[i + 1] in "0123456"):
                    res += dfs(i + 2, memo)
            memo[i] = res
            return res

        return dfs(0, {})

########################################################################

# Tabulation
# https://leetcode.com/problems/decode-ways/discuss/253018/Python%3A-Easy-to-understand-explanation-bottom-up-dynamic-programming
class Solution:   
    def numDecodings(self, s: str) -> int:
        if not s or s[0] == '0':
            return 0
    
        dp = [0] * (len(s) + 1)

        # base case initialization
        dp[0] = 1 
        dp[1] = 1

        for i in range(2, len(s) + 1): 
            # One step jump
            if s[i-1] != '0':    #(2)
                dp[i] += dp[i - 1]

            # Two step jump
            if 10 <= int(s[i-2:i]) <= 26: #(3)
                dp[i] += dp[i - 2]
                
        return dp[-1]
