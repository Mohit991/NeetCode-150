# Explanation: Take two pointers left = 0 and right = len - 1. We increment left by one if sum of 
# left and right is less than target, we decrement right by 1 if sum if greater than target.
# because array is sorted we will reach to the correct solution this way. 

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        N = len(numbers)
        left = 0
        right = N - 1
        ans = []
        
        while left < right:
            if numbers[left] + numbers[right] == target:
                ans.append(left+1)
                ans.append(right+1)
                return ans
            
            elif numbers[left] + numbers[right] > target:
                right -= 1
            
            else:
                left += 1
             
            
            
# dictionary  
class Solution:
    def twoSum2(self, numbers, target):
        dic = {}
        for i, num in enumerate(numbers):
            if target-num in dic:
                return [dic[target-num]+1, i+1]
            dic[num] = i
 

 #binary search  
class Solution:
    def twoSum(self, numbers, target):
        for i in range(len(numbers)):
            l, r = i+1, len(numbers)-1
            tmp = target - numbers[i]
            while l <= r:
                mid = l + (r-l)//2
                if numbers[mid] == tmp:
                    return [i+1, mid+1]
                elif numbers[mid] < tmp:
                    l = mid+1
                else:
                    r = mid-1
                
        
        
