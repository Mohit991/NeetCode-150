# Brute Force Solution:
# TC - O(n^3), SC - O(1)

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = set()
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                for k in range(j+1, len(nums)):
                    if nums[i] + nums[j] + nums[k] == 0:
                        result.add(tuple(sorted([nums[i], nums[j], nums[k]])))       
        return result

######################################################################################

# Optimized: We will store all the elements and their index in a map. 
# Now we will apply two loops and take every pairs. And we will try to find third number in the map.
# If we get that then add to result. 
# TC - O(n^2), SC - O(1)

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        N = len(nums)
        numsMap = {}
        ans = set()
        for i in range(N):
            numsMap[nums[i]] = i

        for i in range(N):
            for j in range(i+1, N):
                target = -1 * (nums[i] + nums[j])
                
                if target in numsMap and numsMap[target] not in (i,j):
                    ans.add(tuple(sorted([nums[i], nums[j], target])))
                    
        return ans

######################################################################################

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        N = len(nums)
        ans = set()
        nums.sort()
        
        for i in range(N):
            left = i + 1
            right = N - 1
            while left < right:
                if nums[i] + nums[left] + nums[right] == 0:
                    ans.add(tuple(sorted([nums[i], nums[left], nums[right]])))
                    right -= 1
                    left += 1
                elif nums[i] + nums[left] + nums[right] > 0:
                    right -= 1
                else:
                    left += 1
        return ans
    
######################################################################################

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = set()
        
        #1. Split nums into three lists: negative numbers, positive numbers, and zeros
        positiveNums = []
        negativeNums = []
        zeros = []
        for n in nums:
            if n > 0:
                positiveNums.append(n)
            elif n < 0:
                negativeNums.append(n)
            else:
                zeros.append(n)
                
        #2. Create a separate set for negatives and positives for O(1) look-up times
        negativeSet = set(negativeNums)
        positiveSet = set(positiveNums)
        
        #3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P
	    #i.e. (-3, 0, 3) = 0
        if zeros:
            for positiveNum in positiveNums:
                for negativeNum in negativeNums:
                    if positiveNum == -1*negativeNum:
                        result.add(tuple(sorted([negativeNum, 0, positiveNum])))
        
        #3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0
        if len(zeros) >= 3:
            result.add((0,0,0))
            
        
        #4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)
	    #exists in the positive number set
        for i in range(len(positiveNums)):
            for j in range(i+1, len(positiveNums)):
                if -1 * (positiveNums[i] + positiveNums[j]) in negativeSet:
                    result.add(tuple(sorted([positiveNums[i], positiveNums[j], -1 * (positiveNums[i] + positiveNums[j])])))
                
        
        #5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)
	    #exists in the negative number set
        for i in range(len(negativeNums)):
            for j in range(i+1, len(negativeNums)):
                if -1 * (negativeNums[i] + negativeNums[j]) in positiveSet:
                    result.add(tuple(sorted([negativeNums[i], negativeNums[j], -1 * (negativeNums[i] + negativeNums[j])])))     

                    
        return result  
