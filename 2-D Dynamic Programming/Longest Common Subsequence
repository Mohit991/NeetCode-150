# Recursive Solution: We will take indexes for both the strings. If current index values
# at text1 and text2 match then we break the problem into subproblem by increasing the 
# index of both strings and adding 1 to our answer. 

# If they dont match, then we break our problem into 2 subproblems
# 1. Take same string text1 and increase index of text2 by 1 
# 2. Take same string text2 and increase index of text1 by 1
# Whichever is the max from above two, we take that as an answer.

# eg
# text1 = "abcde", text2 = "ace" 
# text1[0] == text2[0] so ans is 1 + findCommonSubsequence("bcde", "ce")
# text1[1] != text2[1] so ans is 
# max(findCommonSubsequence("cde", "ce"), findCommonSubsequence("bcde", "e"))
# and so on. 

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        def findCommonSubsequence(index1, index2):
            if index1 >= len(text1) or index2 >= len(text2):
                return 0
            
            if text1[index1] == text2[index2]:
                return 1 + findCommonSubsequence(index1 + 1, index2 + 1)
            else:
                return max(findCommonSubsequence(index1, index2 + 1), findCommonSubsequence(index1 + 1, index2))
        
        return findCommonSubsequence(0, 0)
    
#################################################################################
# We can memoize the above solution by keeping the answer which we found index1 and index2
# later when we need to find this same problem, we will use this. 

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        def findCommonSubsequence(index1, index2, memo):
            if (index1, index2) in memo:
                return memo[(index1, index2)]
            
            if index1 >= len(text1) or index2 >= len(text2):
                return 0
            
            if text1[index1] == text2[index2]:
                memo[(index1, index2)] = 1 + findCommonSubsequence(index1 + 1, index2 + 1, memo)
                return memo[(index1, index2)] 
            else:
                memo[(index1, index2)] = max(findCommonSubsequence(index1, index2 + 1, memo), findCommonSubsequence(index1 + 1, index2, memo))
                return memo[(index1, index2)]
        
        return findCommonSubsequence(0, 0, {})

#################################################################################

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m, n = len(text1), len(text2)
        memo = [[0 for i in range(n+1)] for j in range(m+1)]
        
        for i in range(1, m+1):
            for j in range(1, n+1):
                # print(text1[i-1], '  ', text2[j-1])
                if text1[i-1] == text2[j-1]:
                    memo[i][j] =  memo[i-1][j-1] + 1
                else:
                    memo[i][j] = max(memo[i][j-1], memo[i-1][j])
        # print(memo)
        return memo[-1][-1]
