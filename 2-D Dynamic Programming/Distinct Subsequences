# n = len(s)
# m = len(t)
# Recursive Solution: TC: O(2^n*m), SC: O(n)
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        def findString(i1, i2):
            if i2 >= len(t):
                return 1
            
            if i1 >= len(s) or len(t) - i2 > len(s) - i1:
                return 0
            
            ways = 0
            if s[i1] == t[i2]:
                ways += findString(i1 + 1, i2 + 1)
            
            ways += findString(i1 + 1, i2)
            
            return ways
        
        return findString(0 , 0)
    
######################################################################

# Recursive Solution with Memoization: TC: O(n*m), SC: O(n*m)

class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        def findString(i1, i2, memo):
            if (i1, i2) in memo:
                return memo[(i1, i2)]
            
            if i2 >= len(t):
                return 1
            
            if i1 >= len(s) or len(t) - i2 > len(s) - i1:
                return 0
            
            ways = 0
            if s[i1] == t[i2]:
                ways += findString(i1 + 1, i2 + 1, memo)
            
            ways += findString(i1 + 1, i2, memo)
            memo[(i1, i2)] = ways
            
            return ways
        
        return findString(0 , 0, {})
            
