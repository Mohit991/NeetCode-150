class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        m = len(matrix)
        n = len(matrix[0])
        memo = [[-1 for i in range(n)] for i in range(m)]
        
        def findLongest(i, j, prev):
            if i < 0 or i >= m or j < 0 or j >= n or matrix[i][j] <= prev:
                return 0
            
            if memo[i][j] != -1:
                return memo[i][j]
            
            up = findLongest(i - 1, j, matrix[i][j]) + 1
            down = findLongest(i + 1, j, matrix[i][j]) + 1
            left = findLongest(i, j + 1, matrix[i][j]) + 1
            right = findLongest(i, j - 1, matrix[i][j]) + 1
            
            memo[i][j] = max(max(up, down), max(left, right))
            return memo[i][j]
        
        maxPath = 0
        for i in range(m):
            for j in range(n):
                maxPath = max(maxPath, findLongest(i, j, -1))
                
        return maxPath
        
