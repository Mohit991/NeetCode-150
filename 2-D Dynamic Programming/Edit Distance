# We will go through both the string. We will pass i and j to the function. 
# i = index of word1
# j = index of word2

# if i and j chars match then we increment both and move on.
# if they dont then we can go three branches:
# 1. insert = dfs(i, j + 1) + 1; if we insert then jth char has matched and now
# we need to match the ith char with j+1th char
# 2. delete = dfs(i + 1, j)  + 1; ith char is deleted, so ith match(bc it is deleted)
# then we move onto match i+1th and jth
# 3. replace = dfs(i + 1, j + 1) + 1; we replace ith with jth or vice versa, if so,
# then we know ith and jth match hence we move on to i+1th and j+1th 
# but in all three cases we use a operation.

# TC: O(3 ^ (m*n))
# SC: O(m*n)

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        if word1 == '' and word2 == '':
            return 0
        
        def dfs(i, j):
            if i >= len(word1) and j >= len(word2):
                return 0
            
            if j >= len(word2):
                return len(word1) - i

            if i >= len(word1):
                return len(word2) - j
            
            match = inf
            if word1[i] == word2[j]:
                match = dfs(i+1, j+1)
            
            insert = dfs(i, j + 1) + 1
            delete = dfs(i + 1, j)  + 1
            replace = dfs(i + 1, j + 1) + 1
            return min(match, insert, delete, replace)
        
        return dfs(0, 0)

##################################################################

# TC: O(m * n)
# SC: O(m * n)

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        if word1 == '' and word2 == '':
            return 0
        
        def dfs(i, j, memo):
            if (i, j) in memo:
                return memo[(i, j)]
            
            if i >= len(word1) and j >= len(word2):
                return 0
            
            if j >= len(word2):
                return len(word1) - i

            if i >= len(word1):
                return len(word2) - j
            
            if word1[i] == word2[j]:
                memo[(i, j)] = dfs(i+1, j+1, memo)
                return memo[(i, j)]
            
            insert = dfs(i, j + 1, memo) + 1
            delete = dfs(i + 1, j, memo)  + 1
            replace = dfs(i + 1, j + 1, memo) + 1
            memo[(i, j)] = min(insert, delete, replace)
            return memo[(i, j)]
        
        return dfs(0, 0, {})

##################################################################

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        memo = [[0 for i in range(len(word2)+1)] for j in range(len(word1)+1)]
        row = len(memo)
        col = len(memo[0])
        
        for i in range(row):
            memo[i][0] = i
        
        for j in range(col):
            memo[0][j] = j
        # print(memo)
        for i in range(1, row):
            for j in range(1, col):
                if word1[i-1] == word2[j-1]:
                    memo[i][j] = memo[i-1][j-1]
                else:
                    memo[i][j] = min(memo[i-1][j], memo[i][j-1], memo[i-1][j-1]) + 1
                    
        return memo[-1][-1]
        
