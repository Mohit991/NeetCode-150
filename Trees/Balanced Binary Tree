# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    balanced = True
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def traverse(root):
            if not root:
                return 0
            
            left = traverse(root.left) 
            right = traverse(root.right) 
            
            if abs(left - right) > 1:
                self.balanced = False
        
            return max(left, right) + 1
        
        traverse(root)
        return self.balanced
    
###################################################################

class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        balanced = True
        def height(root):
            if root == None: return 0
            left = height(root.left)
            right = height(root.right)
            if left == -1 or right == -1: return -1
            if abs(left - right)>1: 
                return -1
            return left+1 if left+1>right+1 else right+1
        return height(root) != -1  
