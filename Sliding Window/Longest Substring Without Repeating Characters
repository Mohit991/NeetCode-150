#We will have start and end variables and one indexMap which will contain char and index pairs.
# start and end represent the width of the current window. And current window will not contain
# duplicate chars at any time.
# maxLength will contain the maxLength of string wihtout repeating chars.
# We take the every char and if the char is in the indexMap already then we have seen this char in
# the window already. So, we will pick new start as the index of that char + 1 or start, 
# whichever is greater because window must not contain duplicate at any time.
# We will acquire maxLength as max of maxLength or end - start + 1. Also, increment
#end
#TC - O(n), SC - O(n)

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        start, end = 0, 0
        indexMap = {}
        maxLength = 0
        
        for char in s:
            
            if char in indexMap:
                start = max(start, indexMap[char] + 1)
                
            indexMap[char] = end
            
            maxLength = max(maxLength, end - start + 1)
            end += 1
            
        return maxLength  
        

##########################################################

#We will have start and end variables and one freqMap which will contain char and freq pairs.
# maxLength will contain the maxLength of string wihtout repeating chars. 
# start and end represent the width of the current window. And current window will not contain
# duplicate chars at any time.
# We will loop end from 0 to end. If the current char is not in freqMap or its frequency is 0 then we know that current window does not contain this letter and it is not duplicate. 
# So, we are good and we add this char to freqMap and move on and update maxLength.
# If the char is present in freqMap and freq is non zero then this char is a duplicate and in that case I will move the window from start towards the end and keep moving until that current char freq is not zero. When it becomes zero, I will put its freq as 1 for the encounter at end pointer.
# return maxLength.
#TC - O(n), SC - O(n)

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        start, end = 0, 0
        freqMap = {}
        maxLength = 0
        while end < len(s):
            if s[end] not in freqMap or freqMap[s[end]] == 0:
                freqMap[s[end]] = 1
                end += 1
                
            else: 
                while freqMap[s[end]] != 0:
                    freqMap[s[start]] -= 1
                    start += 1
                freqMap[s[end]]  = 1 #for the current value
                end += 1

                
            maxLength = max(maxLength, end - start)
            
        return maxLength 
