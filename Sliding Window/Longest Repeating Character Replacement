# The problem says that we can make at most k changes to the string (any character can be replaced with 
# any other character). So, let's say there were no constraints like the k. Given a string convert it 
# to a string with all same characters with minimal changes. The answer to this is
# length of the entire string - number of times of the maximum occurring character in the string
# Given this, we can apply the at most k changes constraint and maintain a sliding window such that
# (length of substring - number of times of the maximum occurring character in the substring) <= k

#Create an array of 26 to keep the count of all the chars. Now we create a window between start and end. 
#Apply loop end = 0 to len(s). For every char at end, increment its freq in count and take maxCount as max
#of maxCount or freq of end character which you just added to count. Here end - start + 1 is equal to the 
#length of the current substring. maxCount is the count of most freq char till here. If this value is less than
#or equal to k, then we are good to go bc we will replace the other chars with most freq char and continue.
#But when it is greater than k then that means we are doing more than k replacements which is voilation.
#So, we will reduce the freq of start char by 1 and increment start. 
#We will always have maxSize as max of maxSize or end - start + 1
#TC - O(n), SC - O(1)

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = [0]*26
        maxCount, start, maxSize = 0, 0, 0
        
        for end in range(len(s)):
            count[ord(s[end]) - ord('A')] += 1
            maxCount = max(maxCount, count[ord(s[end]) - ord('A')])
            
            if end - start + 1 - maxCount > k:
                count[ord(s[start]) - ord('A')] -= 1
                start += 1
            
            maxSize = max(maxSize, end - start + 1)
            
        return maxSize    

###########################################################

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        freqMap = {}
        start, end = 0, 0
        maxSize = 0
        maxFreq = 0
        
        while end < len(s):
            currentChar = s[end]
            if currentChar in freqMap:
                freqMap[currentChar] += 1
            else:
                freqMap[currentChar] = 1
            
            maxFreq = max(maxFreq, freqMap[currentChar])
            currentWindow = end - start + 1
            if currentWindow - maxFreq > k:
                freqMap[s[start]] -= 1
                start += 1
                currentWindow = end - start + 1
            
            maxSize = max(maxSize, currentWindow)
            end += 1
        return maxSize
    


        
        
