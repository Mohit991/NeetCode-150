# Discards the least recently used items first. This algorithm requires keeping track of what was used when, which is expensive if one wants to make sure the algorithm always discards the least recently used item.

# An OrderedDict is a dictionary subclass that remembers the order that keys were first inserted. The only difference between dict() and OrderedDict() is that:

# OrderedDict preserves the order in which the keys are inserted. A regular dict doesnâ€™t track the insertion order and iterating it gives the values in an arbitrary order. By contrast, the order the items are inserted is remembered by OrderedDict.

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = OrderedDict()
        
    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        value = self.cache.pop(key)
        self.cache[key] = value
        return value

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache.pop(key)
            self.cache[key] = value
        else:
            if len(self.cache) < self.capacity:
                self.cache[key] = value
            else:
                self.cache.popitem(last=False)
                self.cache[key] = value

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)

# ##########################################################################

# # We can use a doubly linked list to remove any node in O(1) time.
# The most frequent operation of the problem is changing the node position in the list.
# Change position of the node means two operations, delete and insert.
# Double linked list data structure takes constant time O(1) to insert or delete nodes a linked list by repointing the previous and next pointer of the node.
# Array data structure takes O(n) to insert or delete an element in the list by shifting all the element behind the position (backward for insertion, forward for deletion) by one.
 
# put :
# if the key is already in the cache, we update the value, remove the key node and insert the key node after the head;
# if the key is not in cache, if the cache is not full,we insert the new key node after the head. If the cache is full, we delete the node before the tail to make room for the new key node, and insert the new key node after the head.

# get:
# return the value of the key.
# remove the key node.
# insert the key node after the head.

class DoublyListNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = DoublyListNode(-1, -1)
        self.tail = DoublyListNode(-1, -1)
        self.head.next = self.tail
        self.tail.prev = self.head
        
    def removeFromList(self, node):
        prevNode = node.prev
        nextNode = node.next
        prevNode.next = nextNode
        nextNode.prev = prevNode
    
    def insertIntoHead(self, node):
        firstNode = self.head.next
        firstNode.prev = node
        self.head.next = node
        node.next = firstNode
        node.prev = self.head
    
    def removeFromTail(self):
        lastNode = self.tail.prev
        self.removeFromList(lastNode)
        return lastNode.key

        
        
class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.keyToNode = {}
        self.LinkedList = DoublyLinkedList()
        
    def get(self, key: int) -> int:
        if key not in self.keyToNode:
            return -1
        node = self.keyToNode[key]
        self.LinkedList.removeFromList(node)
        self.LinkedList.insertIntoHead(node)
        return node.value
        

    def put(self, key: int, value: int) -> None:
        if key in self.keyToNode:
            node = self.keyToNode[key]
            self.LinkedList.removeFromList(node)
            self.LinkedList.insertIntoHead(node)
            node.value = value
        else:
            if len(self.keyToNode) < self.capacity:
                newNode = DoublyListNode(key, value)
                self.keyToNode[key] = newNode
                self.LinkedList.insertIntoHead(newNode)
            else:
                leastRecentlyUsed = self.LinkedList.removeFromTail()
                self.keyToNode.pop(leastRecentlyUsed)
                newNode = DoublyListNode(key, value)
                self.keyToNode[key] = newNode
                self.LinkedList.insertIntoHead(newNode)



# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
