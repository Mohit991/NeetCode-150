# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# First we have created a function reverse which reverse a LL with a given head and
# returns the new head.

# We will create an array. We will take the LL and divide it into many LLs of size k.
# last LL may not have size equal to k. Now we will store heads of each of such lists
# in an array.
# Now we will call the reverse function and store the new head of each LL(after reversed)
# in the same array.
# Now we have LLs of size k and reversed.
# lastsly we will join these LLs using the same array and return the result. 

class Solution:
    def reverse(self, head):
        prev = None
        current = head
        nextt = head
        while current:
            nextt = current.next
            current.next = prev
            prev = current
            current = nextt
        return prev
    
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        lengthOfLL = 0
        temp = head
        while temp:
            lengthOfLL += 1
            temp = temp.next
            
        changeLastK = False
        if lengthOfLL % k == 0:
            changeLastK = True
            
        kHeads = []
        temp = head
        length = 0
        while temp:
            if length == 0:
                kHeads.append(temp)
            if length == k-1:
                nextt = temp.next
                temp.next = None
                temp = nextt
                length = 0
                continue
            length += 1
            temp = temp.next
            
        for i in range(len(kHeads)):
            if i == len(kHeads) - 1 and not changeLastK:
                continue
            kHeads[i] = self.reverse(kHeads[i])
        
        for i in range(len(kHeads)-1):
            temp = kHeads[i]
            while temp.next:
                temp = temp.next
            temp.next = kHeads[i+1]
        return kHeads[0]

#If we dont want to use extra space then we will take the head of the LLs and take the 
# next k elements. Reverse this part and save it appropirately. 
# Take the next k elements, reverse those and save appropriately. 
# See the code. 
# https://leetcode.com/problems/reverse-nodes-in-k-group/discuss/11440/Non-recursive-Java-solution-and-idea

class Solution:
    def reverseKNodes(self, head, k):
        prev = None
        current = head
        nextt = head
        
        while head and k > 0:
            nextt = current.next
            current.next = prev
            prev = current
            current = nextt
            k -= 1
        return prev
            
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or not head.next or k == 1:
            return head
        dummy = ListNode()
        dummy.next = head
        temp = head
        prev = dummy
        
        while temp:
            kLast = temp
            num = k
            while num > 0 and temp:
                temp = temp.next
                num -= 1
            if num != 0: #if last part does not have k elements then we dont reverse it.
                prev.next = kLast
                break
            kStart = self.reverseKNodes(kLast, k)
            prev.next = kStart
            prev = kLast
        return dummy.next
