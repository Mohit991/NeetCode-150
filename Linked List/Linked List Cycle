# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Solution 1: Use a set. Store each pointer in the set. If you see any pointer in the set, there is a cycle. 
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head: return False
        memo = set()
        temp = head
        while temp != None:
            if temp in memo:
                return True
            memo.add(temp)
            temp = temp.next
        return False

###############################################################

#Solution 2: Use two pointers. Take a fast and slow pointer. Fast pointer runs twice as fast as slow pointer. 
#If at any point they meet, you know there is a cycle. 

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head: return False
        fast, slow = head, head
        
        while fast.next and fast.next.next:
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
            
        return False
