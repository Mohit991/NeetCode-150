#Simple Solution
#TC - O(n)
#SC - O(1)

# Create a maxReach variable and initilize it to 0. maxReach will tell us the max index which we can reach till now. maxReach is 0 at the start because we can always reach the 
# 0th index. 
# Now apply loop on nums. if maxReach < i ie the current index cannot be reached,
# then in that case return false bc if we cant reach this index then we cant reach the end. 
# reach of the current index if nums[i] + i. If maxReach is less than this reach then
# update maxReach since we can go even further now. 
# If at any point maxReach >= n-1 ie we are able to reach the end then return True. 

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        n = len(nums)
        maxReach = 0
        
        for i in range(n):
            if maxReach < i:
                return False
            
            if maxReach < nums[i] + i :
                maxReach = nums[i] + i 
                
            if maxReach >= n-1:
                return True
        
        return False


# class Solution:
#     def canJump(self, nums: List[int]) -> bool:
#         n = len(nums)
#         canReach = [1] + [0]*(n-1)
#         maxReach = 0
        
#         for i in range(n):
#             if canReach[i] == 0:
#                 return False
            
#             if nums[i] + i + 1 >= n:
#                 return True
            
#             if nums[i] + i > maxReach:
#                 for j in range(maxReach, nums[i]+i+1):
#                     canReach[j] = 1
#                     maxReach = j
        
#         return False





#DP Solution with Memoization
#TC - O(n^2)
#SC - O(n)
#Using recursion. Base case is if when you reach last index or beyond. Take index and apply loop from 1 to 
#nums[index] and call the method with this new value. if function returns true then you return true.
#You can easily apply DP to reduce time. 

# class Solution:
#     def canJump(self, nums: List[int]) -> bool:
#         def jump(index, memo):
#             if index in memo:
#                 return False
            
#             if index >= len(nums) - 1:
#                 return True
            
#             for i in range(nums[index], 0, -1):
#                 if jump(index + i, memo):   
#                     return True
            
#             memo.add(index)
#             return False
        
        
#         return jump(0, set())


################################################################

#Simple Solution
#TC - O(n)
#SC - O(1)

#Create a reach variable and initilize it to 0. Now apply loop for nums. Take every value and find a new reach.
#ie max of reach or index + nums[index]. If at any point you get to the last index or beyond then return True. 

# class Solution:
#     def canJump(self, nums: List[int]) -> bool:
#         reach = 0
#         for i in range(len(nums)):
#             if reach >= len(nums) - 1:
#                 return True
#             if i <= reach:
#                 reach = max(reach, i + nums[i])    
#         return False         
            
