#We will use backtracking. In the for loop we first check is till i, s is a palindrome or not. 
#If it is then we cut that part and pass the remaining part and do the same thing. When we get s as
#empty string that means that we have reached at the end and we have found all the palindrome 
#which we have put in the path array. We add that array to result and backtrack. 
#We only go forward iff we find a palindrome.

# Time complexity: O(n*(2^n))
# For a string with length n, there will be (n - 1) intervals between chars.
# For every interval, we can cut it or not cut it, so there will be 2^(n - 1) ways to partition the string.
# For every partition way, we need to check if it is palindrome, which is O(n).
# So the time complexity is O(n*(2^n))
# For every partition way we also need to make a copy of the partitioning to put in the output, this is O(N)
# So the final runtime is O(2^n * n^2)

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        #This function checks for palindrome.
        def isPalindrome(string):
            return string == string[::-1]
        
        
        result = [] 
        
        def backtrack(s, path):
            if not s:
                result.append(path)
                return
            
            for i in range(1, len(s)+1):
                if isPalindrome(s[:i]):
                    backtrack(s[i:], path+[s[:i]])
        
        backtrack(s, [])
        return result 

########################################################################################


class Solution:
    def partition(self, s: str) -> List[List[str]]:
        #This function checks for palindrome.
        def isPalindrome(string):
            return string == string[::-1]
        
        
        result = []
        #We will use backtracking. In the for loop we first check is till i, s is a palindrome or not. 
        #If it is then we cut that part and pass the remaining part and do the same thing. When we get s as
        #empty string that means that we have reached at the end and we have found all the palindrome 
        #which we have put in the path array. We add that array to result and backtrack. 
        #We only go forward iff we find a palindrome. 
        
        def backtrack(path, index):
            if index == len(s)+1:
                result.append(path)
                return
            
            for i in range(index, len(s)+1):
                if isPalindrome(s[index-1:i]):
                    backtrack(path+[s[index-1:i]], i+1)
        
        backtrack([], 1)
        return result 


#############################################################################################
class Solution:
    def partition(self, s: str) -> List[List[str]]:
        #This function checks for palindrome.
        def isPalindrome(string):
            return string == string[::-1]
        
        
        result = []
        path = []
        #We will use backtracking. In the for loop we first check is till i, s is a palindrome or not. 
        #If it is then we cut that part and pass the remaining part and do the same thing. When we get s as
        #empty string that means that we have reached at the end and we have found all the palindrome 
        #which we have put in the path array. We add that array to result and backtrack. 
        #We only go forward iff we find a palindrome. 
        
        def backtrack(s, path):
            if not s:
                result.append(path[:])
                return
            
            for i in range(1, len(s)+1):
                if isPalindrome(s[:i]):
                    path.append(s[:i])
                    backtrack(s[i:], path)
                    path.pop()
        
        backtrack(s, [])
        return result 

####################################################################

class Solution:
    def checkPalindrome(self, string):
        return string == string[::-1]
    
    def partition(self, s: str) -> List[List[str]]:
        res = []
        partition = []
        
        def dfs(index):
            if index >= len(s):
                # print(partition)
                res.append(partition.copy())
                return
            
            for i in range(index, len(s)):
                if self.checkPalindrome(s[index:i+1]):
                    partition.append(s[index:i+1])
                    dfs(i+1)
                    partition.pop()
                    
            return
        
        dfs(0)
        return res
        
