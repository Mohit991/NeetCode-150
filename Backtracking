# Explanation:    
# dfs(nums = [1,2,3], index = 0, path = [], res = [])
# |
# |__ dfs(nums = [1,2,3], index = 1 , path = [1], res = [[]])
# |    |__ dfs(nums = [1,2,3], index = 2 , path = [1,2], res = [[],[1]])
# |    	  |__ dfs(nums = [1,2,3], index = 3 , path = [1,2,3], res = [[],[1], [1,2]])
# |    	  	   # next: res = [[],[1],[1,2],[1,2,3]]
# |    	  	   # for loop will not be executed
# |
# |__ dfs(nums = [1,2,3], index = 2, path = [[2]], res = [[],[1],[1,2],[1,2,3]])
# |    |__ dfs(nums = [1,2,3], index = 3 , path = [[2,3]], res = [[],[1],[1,2],[1,2,3],[2])
# |    	  	   # next iteration: res =  [[],[1],[1,2],[1,2,3],[2],[2,3])
# |    	  	   # for loop will not be executed
# |
# |__ dfs(nums = [1,2,3], index = 3, path = [[3]], res =  [[],[1],[1,2],[1,2,3],[2],[2,3])
#      	  	   # next iteration: res =  [[],[1],[1,2],[1,2,3],[2],[2,3],[3])
#      	  	   # for loop will not be executed  


class Solution:
    #Using index 
    def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        def dfs(index, path):
            ans.append(path)
            for i in range(index, len(nums)):
                dfs(i+1, path+[nums[i]])
        dfs(0, [])    
        return ans        
        
    
class Solution:
    #By slicing the array
    def subsets(self, nums: List[int]) -> List[List[int]]:
        ans = []
        def dfs(nums, path):
            ans.append(path)
            for i in range(len(nums)):
                dfs(nums[i+1:], path+[nums[i]])
        dfs(nums, [])    
        return ans 
    
    
    
# Explanation:    
# While iterating through all numbers, for each new number, we can either pick it or not pick it
# 1, if pick, just add current number to every existing subset.
# 2, if not pick, just leave all existing subsets as they are.
# We just combine both into our result.

# For example, {1,2,3} intially we have an emtpy set as result [ [ ] ]
# Considering 1, if not use it, still [ ], if use 1, add it to [ ], so we have [1] now
# Combine them, now we have [ [ ], [1] ] as all possible subset

# Next considering 2, if not use it, we still have [ [ ], [1] ], if use 2, just add 2 to each previous subset, we have [2], [1,2]
# Combine them, now we have [ [ ], [1], [2], [1,2] ]

# Next considering 3, if not use it, we still have [ [ ], [1], [2], [1,2] ], if use 3, just add 3 to each previous subset, we have [ [3], [1,3], [2,3], [1,2,3] ]
# Combine them, now we have [ [ ], [1], [2], [1,2], [3], [1,3], [2,3], [1,2,3] ]
    
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:   
        ans = [[]]
        for n in nums:
            for j in range(len(ans)):
                ans.append(ans[j]+[n])
        return ans   
