#Solution: we create a function and we take three things, current index, current combination and currentSum. 
#if sum is equal to target, we got the combination, add this to result. If sum > target, we must quit here
#because we have gone beyond the target and we can add any number but we wont get target so return.
#In order to avoid duplicates, we will pass index to the function and we will only move forward from that index,
#because of this we will never get duplicates in solution. 
# TC - O(2^k) where k is the sum of target/candidate[i] from i = 0 to size of candidate - 1. 
#SC - O(target) eg candidates = [1] and target = 5, recursion tree depth will be 5.

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        result = []
        
        def backtrack(index, combination, sum):
            if sum == target:
                result.append(combination)
                return
            if sum > target:
                return
            for i in range(index, len(candidates)):
                backtrack(i, combination+[candidates[i]], sum+candidates[i])
        
        backtrack(0, [], 0)
        return result
    
#########################################################################################

# class Solution:
#     def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        # res = []
        # def helper(target, path):
        #     if target == 0:
        #         res.append(path)
        #         return 
        #     if target < 0:
        #         return 
        #     for i in candidates:
        #          helper(target - i, path+[i])
        #     return     
        # helper(target, [])
        # return res      
    #above code is correct code but the only problem is that this code allows duplicates so the answer is not 
    #correct because answer does not need duplicates. 

#########################################################################################

# class Solution:
#     def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
#         res = []
#         def dfs(nums, target, path):
#             if target < 0:
#                 return 
#             if target == 0:
#                 res.append(path)
#                 return 
#             for i in range(len(nums)):
#                 dfs(nums[i:], target-nums[i], path+[nums[i]])
#                 #here we dont get duplicates because once we have moved forward in the loop we will not take 
#                 #previous valus in the candidates array and hence we do not get duplicate. 
#         dfs(candidates, target, [])
#         return res 
