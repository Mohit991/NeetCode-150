# We will check the LSB of n and see if it is one or not. If one, increment one.
# Then we will shift n by one bit towards the right. We will again check the LSB.
# In this way we will tell no of 1 bits in n. 

class Solution:
    def hammingWeight(self, n: int) -> int:
        countOfOnes = 0
        
        while n > 0:
            if n & 1:
                countOfOnes += 1
            n = n >> 1
        
        return countOfOnes

############################################################

# n & (n - 1) drops the lowest set bit. It's a neat little bit trick.

# Let's use n = 00101100 as an example. This binary representation has three 1s.

# If n = 00101100, then n - 1 = 00101011, so n & (n - 1) = 00101100 & 00101011 = 00101000. Count = 1.

# If n = 00101000, then n - 1 = 00100111, so n & (n - 1) = 00101000 & 00100111 = 00100000. Count = 2.

# If n = 00100000, then n - 1 = 00011111, so n & (n - 1) = 00100000 & 00011111 = 00000000. Count = 3.

# n is now zero, so the while loop ends, and the final count (the numbers of set bits) is returned.
class Solution:
    def hammingWeight(self, n: int) -> int:
        countOfOnes = 0
        while n > 0:
            n = n & (n-1)
            countOfOnes += 1
        return countOfOnes
