class Solution:
    def countBits(self, n: int) -> List[int]:
        if n == 0:
            return [0]
        if n == 1:
            return [0,1] 
        
        ans = [0,1] + [0]*(n-1)
        
        for i in range(2,(n+1)):
            if i % 2 == 0:
                ans[i] = ans[int(i/2)]
            else:
                ans[i] = ans[int(i/2)] + 1
        return ans            







class Solution:
    def countBits(self, n: int) -> List[int]:
        #Brute Force - In this solution we we take every number and keep dividing it by 2 until 
        #the number becomes equal to zero. When we divide by zero we will check if the number is 
        #odd or even, if odd than we know that least significant bit is 1 and we will increment 
        #count by one. if number is even than we do not increment count and simply divide by two.
        #TC - O(n log n), SC - O(1)
        
        ans = [0] * (n+1)
        
        for i in range(1, n+1):
            j = i
            count = 0
            while j > 0:
                if j % 2 != 0:
                    count += 1
                j = j >> 1
            ans[i] = count    
                
        
        return ans
    
###################################################################################################

# We can apply DP in the above solution and get this solution. 
# Prerequisite
# As we know, a number can be classified into an even or odd number.
# An even number ends with 0 in binary
# An odd number ends with 1 in binary

# Strategy
# Let's denote the number as num:
# If it is even, the ending bit is 0, then that bit can be ignored, countBits(num) is the same as countBits(num >> 1), so countBits(num) = countBits(num >> 1);
# For example:
# num:      101010101010
# num >> 1: 10101010101

# If it is odd, the ending bit is 1, then the number of set bits is that of num - 1 + 1, i.e. countBits(num) = countBits(num - 1) + 1
# For example:
# num:     101010101011
# num - 1: 101010101010
# Final code


class Solution:
    def countBits(self, n: int) -> List[int]:  
        if n == 0:
            return [0]
        if n == 1: 
            return [0,1]
        ans = [0]*(n+1)
        
        for i in range(1, n+1):
            if i%2 == 0:
                ans[i] = ans[i//2]
            else:
                ans[i] = ans[i-1] + 1

        return ans  
    
####################################################################################################
#In this solution we use DP. We see the pattern that for any number i, no of 1s in i is equal to 
#no of 1s in last power of i + 1. eg no of 1s in 7 is no of 1s in 7 - 4 = 3 which is 2 + 1.
#Another example is no of ones in 5 is no of 1s in 5-4 = 1 which is 1 and 1 + 1 = 2 
#You will have two draw binary of some numbers to see this pattern. 
#TC - O(n) and SC - O(1)
class Solution:
    def countBits(self, n: int) -> List[int]:
        if n == 0: return [0]
        if n == 1: return [0,1]
        
        ans = [0] * (n+1)
        ans[0] = 0
        ans[1] = 1
        
        for i in range(2, n+1):
            if i & (i-1) == 0:
                powerTwo = i
            ans[i] = ans[i - powerTwo] + 1
                
        return ans        
                
###################################################################################################
#We know that for any number i, no of ones in i are equal to no of 1s in i/2 if i is even and no of ones in
#i/2 + 1 is i is odd. We can create a recursive function to implement such a logic. later we can apply
#DP to optimise is to O(n)

class Solution:
    def countBits(self, n: int) -> List[int]:  
        if n == 0:
            return [0]
        if n == 1: 
            return [0,1]
        
        
        ans = [0] * (n+1)
        ans[1] = 1
        
        def countOnes(n, ans):
            if n == 0:
                return 0
            if n == 1: 
                return 1            
            if ans[n] != 0: 
                return ans[n]
            
            if n%2 == 0:
                ans[n] = countOnes(n//2, ans)
                return ans[n]
            else:
                ans[n] = countOnes((n//2), ans) + 1
                return ans[n]
                
        
        for i in range(2,n+1):
            countOnes(i , ans)    
        return ans 
    
#####################################################################
