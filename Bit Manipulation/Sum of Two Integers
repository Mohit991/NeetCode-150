# Explanation: https://leetcode.com/problems/sum-of-two-integers/discuss/132479/Simple-explanation-on-how-to-arrive-at-the-solution
# Can only do positive numbers.

class Solution:
    def getSum(self, a: int, b: int) -> int:
        carry = 0
        while b != 0:
            carry = a & b
            carry = carry << 1
            a = a ^ b
            b = carry #we need to add carry back to sum.
        return a

# we have to create a different solution for python due to negative numbers implemenation in python.

# https://leetcode.com/problems/sum-of-two-integers/discuss/489210/Read-this-if-you-want-to-learn-about-masks

class Solution:
    def getSum(self, a: int, b: int) -> int:
        carry = 0
        mask = 0xffffffff
        while b & mask > 0:
            carry = a & b
            carry = carry << 1
            a = a ^ b
            b = carry #we need to add carry back to sum.
        return (a & mask) if b > 0 else a
            
        
# class Solution:
#     def getSum(self, a: int, b: int) -> int:
#         res = 0
#         carry = 0
#         powerOfTwo = 0
        
#         while a > 0 or b > 0 or carry:
#             bitOfA = a & 1
#             bitOfB = b & 1
#             bitOfRes = bitOfA ^ bitOfB ^ carry

#             if carry == 0:
#                 if bitOfA == 1 and bitOfB == 1:
#                     carry = 1
#             else:
#                 if bitOfA == 0 and bitOfB == 0:
#                     carry = 0
            
#             temp = pow(2, powerOfTwo)
#             powerOfTwo += 1
#             if bitOfRes:
#                 res += temp
#             a = a >> 1
#             b = b >> 1
        
#         return res
