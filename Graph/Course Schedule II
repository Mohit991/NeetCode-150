#We will use similar solution to Course Schedule I. We will first create a defaultdict.
#We will create a graph out of prerequisites. Then we will use DFS. Using DFS we can find 
#if there are any cycles in the graph or not. We will use two things, a list and a set,
#to support our answer. We will put the ordering in the list and to avoid getting duplicates
#in the list, we will use a set, which will tell which courses are already put in the 
# ordering.

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = defaultdict(list)
        for preq in prerequisites:
            graph[preq[1]].append(preq[0])
        
        visited, noCycle = set(), set()
        possibleOrdering, alreadyOrdered = [], set()
        def dfs(course):
            if course in visited:
                return False
            if course in noCycle:
                return True
            visited.add(course)
            for c in graph[course]:
                if not dfs(c):
                    return False
            visited.remove(course)
            noCycle.add(course)
            if course not in alreadyOrdered:
                alreadyOrdered.add(course)
                possibleOrdering.append(course)
            return True
        
        for course in range(numCourses):
            if not dfs(course):
                return []
        possibleOrdering.reverse()
        return possibleOrdering
# At the end we have the reverse the possible ordering because we are adding the node to the list
# after processing all of the neighbours. Hence the order will be reversed. 

########################################################################################


# Topological Sort is Easy -- The General Template
# 
# What we need ?
# 1. Map inDegree: A in-degree map, which record each nodes in-degree.
# 2. Map graph: A graph map which record the Node's children

# What we do ?
# 1. Init: Init the two Maps.
# 2. Build Map: Put the child into parent's list ; Increase child's in-degree by 1.
# 3. Find Node with 0 in-degree: Iterate the inDegree map, find the Node has 0 inDegree. 
# (If none, there must be a circle)
# 4. Decrease the children's inDegree by 1: Decrease step3's children's inDegree by 1.
# 5. Remove this Node: Remove step3's Node from inDegree. Break current iteration.
# 6. Do 3-5 until inDegree is Empty: Use a while loop

# class Solution:
#     def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
#         inDegree = {}
#         graph = defaultdict(list)
        
#         for course in range(numCourses):
#             inDegree[course] = 0
            
#         for prereq in prerequisites:
#             currentCourse = prereq[0]
#             preCourse = prereq[1]
#             graph[preCourse].append(currentCourse)
#             inDegree[currentCourse] += 1
            
#         result = []
#         while(inDegree):
#             cycle = True
#             for course in inDegree:
#                 if inDegree[course] == 0:
#                     result.append(course)
#                     for dependentCourses in graph[course]:
#                         inDegree[dependentCourses] -= 1
#                     inDegree.pop(course)
#                     cycle = False 
#                     #if this if condition is true that means cycle is not present till now
#                     break
#             if cycle:
#                 return []
#         return result     
                    

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        inDegree = {}
        graph = defaultdict(list)
        
        for course in range(numCourses):
            inDegree[course] = 0
            
        for prereq in prerequisites:
            currentCourse = prereq[0]
            preCourse = prereq[1]
            graph[preCourse].append(currentCourse)
            inDegree[currentCourse] += 1
            
        order = []
        q = []
        for course in inDegree:
            if inDegree[course] == 0:
                q.append(course)
                order.append(course)
                
        while q:
            course = q.pop()
            for dependentCourses in graph[course]:
                inDegree[dependentCourses] -= 1
                if inDegree[dependentCourses] == 0:
                    q.append(dependentCourses)
                    order.append(dependentCourses)
                    
                    
        if len(order) == numCourses:
            return order
        else:
            return []
                    
