#Solution: First lets create a new array merged which will have the merged intervals.
# Now lets sort the invtervals array using the first value of each interval 
# otherwise the algorithm does not work.We will put 
#first interval in this merged array. 
# So now for every next interval in the intervals array:
#1. Either this interval merges with the last interval that we have in the merged array. 
# If the first value of the interval(smaller value) is less than or equal to the second
# value (bigger value) in the last interval of merged list, then we merge this interval. 
# get  max(intervals[i][1], merged[-1][1]) and put it in second value in merged interval.
#2. or this interval cant be merged and we must take this and add this as an individual interval. 

#TC - O(log n) -- For sorting

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort()
        merged = [intervals[0]]
        for i in range(1, len(intervals)):
            if intervals[i][0] <= merged[-1][1]:
                merged[-1][1] = max(intervals[i][1], merged[-1][1])
            else:
                merged.append(intervals[i])
        return merged
