# Explanation: First I created a function to find the correct row for the target value.
# For this we can use binary search. 
# If target is between first and last element of the row then this the correct row. 
# If target is less than first element of the row, then put right = mid
# else put left to mid + 1
# If we cant find correct row, return -1. 

# In the main function we call findTargetRow. If this function returns -1 then we return 
# False.
# Else we apply another binary search on that row to find the element. 

class Solution:
    def findTargetRow(self, matrix, target):
        left = 0
        right = len(matrix)
        
        while left < right:
            mid = left + (right - left) // 2
            if matrix[mid][0] <= target <= matrix[mid][-1]:
                return mid
            
            if matrix[mid][0] > target:
                right = mid 
            else:
                left = mid + 1
        return -1
    
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        targetRow = self.findTargetRow(matrix, target)
        if targetRow == -1:
            return False
        
        left = 0
        right = len(matrix[targetRow])
        
        while left < right:
            mid = left + (right - left) // 2
            if matrix[targetRow][mid] == target:
                return True
            
            if matrix[targetRow][mid] > target:
                right = mid 
            else:
                left = mid + 1
        return False
            

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        row = len(matrix)
        col = len(matrix[0])
        
        i = 0
        j = col-1
        
        while i < row and j >= 0:
            if matrix[i][j] == target:
                return True
            
            if target < matrix[i][j]:
                j -= 1
            else:
                i += 1
        
        return False



class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        #We will treat this 2D array as a 1D array. 
        row = len(matrix)
        col = len(matrix[0])
        total = row * col
        
        #if matrix is empty return false
        if row == 0 and col == 0:
            return False
        
        #Initilize left and right
        left = 0
        right = total
        
        
        while left < right:
            mid = left + (right - left) // 2
            
            #from the mid, find the correct row(i) and correct column(j)
            i = mid // col
            j = mid % col
            
            #Use the generic Binary Seach template. 
            if matrix[i][j] == target:
                return True
            
            if matrix[i][j] < target:
                left = mid + 1
            else:
                right = mid
        
        return False         
            
        
#Below is the generic binary search template which can be used i many problems.

# def binary_search(array) -> int:
#     def condition(value) -> bool:
#         pass

#     left, right = 0, len(array)
#     while left < right:
#         mid = left + (right - left) // 2
#         if condition(mid):
#             right = mid
#         else:
#             left = mid + 1
#     return left


         
